
R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### Read in Data ################################
> setwd('~/Homework/') # andrew's wd
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
> load("cleaned_data.rdata")
> 
> ### REMOVE REDUNDANT VARIABLES ######################################
> 
> # Split the data back into training/test data sets. This will 
> # prevent us from making any variable selection decisions
> # from the test set.
> 
> cleaned_training <- cleaned_data[cleaned_data$data_inj == 0,]
> cleaned_test <- cleaned_data[cleaned_data$data_inj == 1,]
> rm(cleaned_data)
> 
> cleaned_training$data_inj <- NULL
> cleaned_test$data_inj <- NULL
> # split into X and y
> cleaned_training_X <- cleaned_training
> cleaned_training_X$target <- NULL
> cleaned_training_y <- cleaned_training$target
> 
> 
> # Grab numeric variables
> dtypes <- sapply(cleaned_training_X, class)
> unique(dtypes)
[1] "factor"  "integer" "numeric"
> factor_ind <- unname(which(sapply(cleaned_training_X, class) == "factor"))
> numeric_data <- cleaned_training_X[,-factor_ind]
> 
> 
> # Construct correlation matrix
> corr_matrix <- cor(numeric_data)
> save(corr_matrix,file="corr_matrix.rdata")
> 
> # Use findCorrelation function to retrieve the correlated variable indices
> # and then remove them from the data set
> corr_vars <- findCorrelation(corr_matrix,.9)
> rm(corr_matrix)
> numeric_data <- numeric_data[,-corr_vars]
> 
> # Join numeric data back with factor data
> reduced_data_train <- cbind(numeric_data,cleaned_training_X[,factor_ind])
> rm(cleaned_training_X)
> rm(numeric_data)
> reduced_data_train$target <- cleaned_training_y
> 
> 
> # remove the variables from test that we removed from training
> reduced_data_test <- cleaned_test[,colnames(reduced_data_train)]
> reduced_data_test$target <- NULL
> 
> 
> 
> ### write the reduced training and test to disk
> 
> save(reduced_data_test, file='reduced_data_test.rdata')
> save(reduced_data_train, file='reduced_data_train.rdata')
> rm(reduced_data_train)
> rm(reduced_data_test)
> gc()
            used   (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells   1541567   82.4    2637877  140.9   1843436   98.5
Vcells 343809449 2623.1 1011313503 7715.8 807687351 6162.2
> 
> 
> ### PRINCIPAL COMPONENTS ############################################
> 
> cleaned_data_X <- cleaned_training
> cleaned_data_X$target <- NULL
> cleaned_data_y <- cleaned_training$target
> 
> # If we want to reduce dimensions further, we can use princ comps
> # but we can only use them on numeric variables
> factor_ind <- unname(which(sapply(cleaned_data_X, class) == "factor"))
> numeric_data <- cleaned_data_X[,-factor_ind]
> 
> 
> pcs <- princomp(numeric_data)
> 
> 
> # select the M prin comps that explain 99% of the variance
> total.var = sum(pcs$sd^2)
> pct.var = pcs$sd^2/total.var
> n.99 <- which(cumsum(pct.var)>= .99)[1]
> 
> # transform the numeric training vars
> num_train.transformed <- pcs$scores[,1:n.99]
> 
> # recompose the data frame
> transformed_data_train <- cleaned_training[,factor_ind]
> transformed_data_train$pc1 <- num_train.transformed
> transformed_data_train$target <- cleaned_data_y
> 
> 
> # do it to the test set too
> cleaned_data_X_test <- cleaned_test
> cleaned_data_X_test$target <- NULL
> cleaned_data_y_test <- cleaned_test$target
> 
> factor_ind_test <- unname(which(sapply(cleaned_data_X_test, class) == "factor"))
> numeric_data_test <- cleaned_data_X_test[,-factor_ind_test]
> 
> num_test.transformed <- predict(pcs,numeric_data_test)[,1:n.99]
> 
> transformed_data_test<- cleaned_data_X_test[,factor_ind_test]
> transformed_data_test$pc1 <- num_test.transformed
> 
> 
> 
> # PCA data set we want to work with:
> save(transformed_data_train,file="PCA_data_train.rdata")
> save(transformed_data_test,file="PCA_data_test.rdata")
> rm(list=ls())
> 
> 
> 
> proc.time()
    user   system  elapsed 
1593.892   25.768 1681.318 
Warning message:
system call failed: Cannot allocate memory 
