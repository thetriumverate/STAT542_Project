
R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd("~/Homework/") # andrew's wd
> #setwd("~/UIUC/STAT542") # Noah's wd
> #setwd("~/Git/Stat542") # Zach's wd
> 
> set.seed(1738)
> library(gdata)
gdata: read.xls support for 'XLS' (Excel 97-2004) files ENABLED.

gdata: read.xls support for 'XLSX' (Excel 2007+) files ENABLED.

Attaching package: ‘gdata’

The following object is masked from ‘package:stats’:

    nobs

The following object is masked from ‘package:utils’:

    object.size

> library(lubridate)
> library(randomForest)
randomForest 4.6-12
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:gdata’:

    combine

> 
> 
> ### Read in Data ################################
> 
> ### Stores CSVs as Rdata for faster loading
> 
> if (!file.exists('train.rdata')){ 
+   train <- read.csv("train.csv",row.names=1)
+   save(train, file='train.rdata')
+   rm(train)
+ } 
> 
> if (!file.exists('test.rdata')){
+   test <- read.csv("test.csv",row.names=1)
+   save(test, file='test.rdata')
+   rm(test)
+ }
> 
> ### loads in the rdata files and combines them into all_data
> 
> load("train.rdata")
> train$data_inj = 0; #this indicator tells us which data set the row belongs to (0 for train, 1 for test)
> 
> load("test.rdata")
> test$target = 999999; # Set to arbitrary value 
> test$data_inj = 1;
> 
> #combining data sets
> all_data <- rbind(train, test)
> rm(list=setdiff(ls(), "all_data"))
> gc()
            used   (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells    409967   21.9    1416599   75.7   1404706   75.1
Vcells 283964452 2166.5  719252618 5487.5 749133000 5715.5
> 
> ### inspect datatypes ###########################
> 
> dtypes <- sapply(all_data, class)
> unique(dtypes)
[1] "factor"  "integer" "logical" "numeric"
> 
> ### FACTOR VARIABLES ############################
> 
> str(all_data[,which(sapply(all_data, class) == "factor")])
'data.frame':	290463 obs. of  51 variables:
 $ VAR_0001: Factor w/ 3 levels "H","Q","R": 1 1 1 1 3 3 1 3 3 3 ...
 $ VAR_0005: Factor w/ 4 levels "B","C","N","S": 2 1 2 2 3 2 2 1 3 3 ...
 $ VAR_0008: Factor w/ 2 levels "","false": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0009: Factor w/ 2 levels "","false": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0010: Factor w/ 2 levels "","false": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0011: Factor w/ 2 levels "","false": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0012: Factor w/ 2 levels "","false": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0043: Factor w/ 2 levels "","false": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0044: Factor w/ 2 levels "","[]": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0073: Factor w/ 1541 levels "","01APR10:00:00:00",..: 1 190 1 1 1 1 1 1 1219 1 ...
 $ VAR_0075: Factor w/ 2526 levels "","01APR08:00:00:00",..: 619 771 960 1800 1166 437 2007 1362 1978 2142 ...
 $ VAR_0156: Factor w/ 828 levels "","01APR12:00:00:00",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0157: Factor w/ 517 levels "","01APR11:00:00:00",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0158: Factor w/ 496 levels "","01APR12:00:00:00",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0159: Factor w/ 725 levels "","01APR12:00:00:00",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0166: Factor w/ 2375 levels "","01APR09:00:00:00",..: 1 1 1 1 1 1 1 1 827 1 ...
 $ VAR_0167: Factor w/ 1067 levels "","01APR08:00:00:00",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0168: Factor w/ 1904 levels "","01APR05:00:00:00",..: 1 1 1 1 1 1 1 1 1169 1 ...
 $ VAR_0169: Factor w/ 2190 levels "","01APR09:00:00:00",..: 1 1 1 1 1 1 1 1 728 1 ...
 $ VAR_0176: Factor w/ 2387 levels "","01APR09:00:00:00",..: 1 1 1 1 1 1 1 1 835 1 ...
 $ VAR_0177: Factor w/ 1155 levels "","01APR08:00:00:00",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0178: Factor w/ 1908 levels "","01APR05:00:00:00",..: 1 1 1 1 1 1 1 1 1168 1 ...
 $ VAR_0179: Factor w/ 2166 levels "","01APR09:00:00:00",..: 1 1 1 1 1 1 1 1 716 1 ...
 $ VAR_0196: Factor w/ 2 levels "","false": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0200: Factor w/ 16584 levels "","10 MEDIA",..: 3940 9900 9242 6191 3816 10537 4467 11653 9779 7896 ...
 $ VAR_0202: Factor w/ 2 levels "","BatchInquiry": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0204: Factor w/ 1194 levels "","01FEB14:00:00:00",..: 207 13 362 9 135 809 122 445 676 972 ...
 $ VAR_0214: Factor w/ 26 levels "","FSI-0005-1",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0216: Factor w/ 2 levels "","DS": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0217: Factor w/ 398 levels "","01APR12:02:00:00",..: 102 26 160 12 194 73 142 227 288 358 ...
 $ VAR_0222: Factor w/ 2 levels "","C6": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0226: Factor w/ 3 levels "","false","true": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0229: Factor w/ 2 levels "","false": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0230: Factor w/ 3 levels "","false","true": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0232: Factor w/ 3 levels "","false","true": 3 2 3 2 3 3 2 3 2 3 ...
 $ VAR_0236: Factor w/ 3 levels "","false","true": 3 3 3 3 3 3 3 3 3 3 ...
 $ VAR_0237: Factor w/ 47 levels "","AK","AL","AR",..: 11 6 45 40 16 40 35 12 40 36 ...
 $ VAR_0239: Factor w/ 2 levels "","false": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0274: Factor w/ 58 levels "","-1","AK","AL",..: 13 27 57 51 19 26 7 48 51 43 ...
 $ VAR_0283: Factor w/ 9 levels "","-1","F","H",..: 7 7 7 7 7 7 7 7 7 7 ...
 $ VAR_0305: Factor w/ 9 levels "","-1","F","H",..: 8 8 6 6 6 8 8 8 4 8 ...
 $ VAR_0325: Factor w/ 10 levels "","-1","F","G",..: 2 5 8 5 9 5 9 9 9 9 ...
 $ VAR_0342: Factor w/ 51 levels "","-1","AA","AB",..: 22 33 51 2 2 42 26 43 2 35 ...
 $ VAR_0352: Factor w/ 5 levels "","-1","O","R",..: 3 3 4 4 4 5 3 5 4 5 ...
 $ VAR_0353: Factor w/ 5 levels "","-1","O","R",..: 5 4 4 4 5 4 3 3 5 5 ...
 $ VAR_0354: Factor w/ 5 levels "","-1","O","R",..: 3 4 2 2 3 4 3 4 5 5 ...
 $ VAR_0404: Factor w/ 3144 levels "","-1","2007 - 2008 CHAPTER MEMBER",..: 269 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0466: Factor w/ 3 levels "","-1","I": 2 3 2 2 2 2 2 2 2 2 ...
 $ VAR_0467: Factor w/ 5 levels "","-1","Discharged",..: 2 3 2 2 2 2 2 2 2 2 ...
 $ VAR_0493: Factor w/ 797 levels "","-1","ACCOUNTANT",..: 122 2 2 2 2 2 2 2 2 2 ...
 $ VAR_1934: Factor w/ 5 levels "BRANCH","CSC",..: 3 3 3 5 1 3 3 3 4 1 ...
> 
> # we notice the missing values are
> # represented by "", -1, or []
> # so replace with NA
> 
> train_fact <- all_data[,which(sapply(all_data, class) == "factor")]
> train_fact[train_fact == -1] = NA
> train_fact[train_fact == "[]"] = NA
> train_fact[train_fact == ""] = NA
> all_data[,which(sapply(all_data, class) == "factor")] <- drop.levels(train_fact)
> gc()
            used   (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells    426170   22.8    1416599   75.7   1416599   75.7
Vcells 291448070 2223.6  719252618 5487.5 749133000 5715.5
> 
> # check to make sure it worked
> str(all_data[,which(sapply(all_data, class) == "factor")])
'data.frame':	290463 obs. of  51 variables:
 $ VAR_0001: Factor w/ 3 levels "H","Q","R": 1 1 1 1 3 3 1 3 3 3 ...
 $ VAR_0005: Factor w/ 4 levels "B","C","N","S": 2 1 2 2 3 2 2 1 3 3 ...
 $ VAR_0008: Factor w/ 1 level "false": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0009: Factor w/ 1 level "false": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0010: Factor w/ 1 level "false": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0011: Factor w/ 1 level "false": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0012: Factor w/ 1 level "false": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0043: Factor w/ 1 level "false": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0044: Factor w/ 0 levels: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0073: Factor w/ 1540 levels "01APR10:00:00:00",..: NA 199 NA NA NA NA NA NA 1288 NA ...
 $ VAR_0075: Factor w/ 2525 levels "01APR05:00:00:00",..: 661 825 1023 1915 1241 466 2141 1455 2109 2280 ...
 $ VAR_0156: Factor w/ 827 levels "01APR10:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0157: Factor w/ 516 levels "01APR11:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0158: Factor w/ 495 levels "01APR12:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0159: Factor w/ 724 levels "01APR12:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0166: Factor w/ 2374 levels "01APR05:00:00:00",..: NA NA NA NA NA NA NA NA 924 NA ...
 $ VAR_0167: Factor w/ 1066 levels "01APR08:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0168: Factor w/ 1903 levels "01APR05:00:00:00",..: NA NA NA NA NA NA NA NA 1357 NA ...
 $ VAR_0169: Factor w/ 2189 levels "01APR05:00:00:00",..: NA NA NA NA NA NA NA NA 846 NA ...
 $ VAR_0176: Factor w/ 2386 levels "01APR05:00:00:00",..: NA NA NA NA NA NA NA NA 929 NA ...
 $ VAR_0177: Factor w/ 1154 levels "01APR08:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0178: Factor w/ 1907 levels "01APR05:00:00:00",..: NA NA NA NA NA NA NA NA 1356 NA ...
 $ VAR_0179: Factor w/ 2165 levels "01APR08:00:00:00",..: NA NA NA NA NA NA NA NA 832 NA ...
 $ VAR_0196: Factor w/ 1 level "false": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0200: Factor w/ 16583 levels "1 MEMPHIS","2 WHITE OAK",..: 5276 13231 12357 8287 5110 14094 5994 15610 13068 10548 ...
 $ VAR_0202: Factor w/ 1 level "BatchInquiry": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0204: Factor w/ 1193 levels "01FEB14:00:00:00",..: 206 12 361 8 134 808 121 444 675 972 ...
 $ VAR_0214: Factor w/ 25 levels "FSI-0005-1","FSI-0003-1",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0216: Factor w/ 1 level "DS": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0217: Factor w/ 397 levels "01APR12:02:00:00",..: 101 25 159 11 193 72 141 226 287 357 ...
 $ VAR_0222: Factor w/ 1 level "C6": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0226: Factor w/ 2 levels "false","true": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0229: Factor w/ 1 level "false": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0230: Factor w/ 2 levels "false","true": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0232: Factor w/ 2 levels "false","true": 2 1 2 1 2 2 1 2 1 2 ...
 $ VAR_0236: Factor w/ 2 levels "false","true": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0237: Factor w/ 46 levels "AK","AL","AR",..: 10 5 45 40 15 40 35 11 40 36 ...
 $ VAR_0239: Factor w/ 1 level "false": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0274: Factor w/ 56 levels "AK","AL","AR",..: 11 25 55 49 17 24 5 46 49 41 ...
 $ VAR_0283: Factor w/ 7 levels "F","G","H","P",..: 6 6 6 6 6 6 6 6 6 6 ...
 $ VAR_0305: Factor w/ 7 levels "F","H","M","P",..: 6 6 4 4 4 6 6 6 2 6 ...
 $ VAR_0325: Factor w/ 8 levels "F","G","H","M",..: NA 3 6 3 7 3 7 7 7 7 ...
 $ VAR_0342: Factor w/ 49 levels "AA","AB","AC",..: 20 31 49 NA NA 40 24 41 NA 33 ...
 $ VAR_0352: Factor w/ 3 levels "O","R","U": 1 1 2 2 2 3 1 3 2 3 ...
 $ VAR_0353: Factor w/ 3 levels "O","R","U": 3 2 2 2 3 2 1 1 3 3 ...
 $ VAR_0354: Factor w/ 3 levels "O","R","U": 1 2 NA NA 1 2 1 2 3 3 ...
 $ VAR_0404: Factor w/ 3142 levels "2ND VICE PRESIDENT",..: 467 NA NA NA NA NA NA NA NA NA ...
 $ VAR_0466: Factor w/ 1 level "I": NA 1 NA NA NA NA NA NA NA NA ...
 $ VAR_0467: Factor w/ 3 levels "Discharged","Discharge NA",..: NA 1 NA NA NA NA NA NA NA NA ...
 $ VAR_0493: Factor w/ 795 levels "ACCOUNTANT","ACTIVE ASSOCIATES WITH NO PRIVACY",..: 152 NA NA NA NA NA NA NA NA NA ...
 $ VAR_1934: Factor w/ 5 levels "BRANCH","CSC",..: 3 3 3 5 1 3 3 3 4 1 ...
> # now those look like nice factor vars
> 
> # although there are still some with only 1 level
> 
> bad.vars <- which(sapply(all_data,nlevels) ==1)
> bad.vars
VAR_0008 VAR_0009 VAR_0010 VAR_0011 VAR_0012 VAR_0043 VAR_0196 VAR_0202 
       8        9       10       11       12       43      196      202 
VAR_0216 VAR_0222 VAR_0229 VAR_0239 VAR_0466 
     216      221      228      238      464 
> all_data <- all_data[,-bad.vars]
> gc()
            used   (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells    426110   22.8    1416599   75.7   1416599   75.7
Vcells 289559977 2209.2  719252618 5487.5 749133000 5715.5
> 
> # check again to make sure it worked
> str(all_data[,which(sapply(all_data, class) == "factor")])
'data.frame':	290463 obs. of  38 variables:
 $ VAR_0001: Factor w/ 3 levels "H","Q","R": 1 1 1 1 3 3 1 3 3 3 ...
 $ VAR_0005: Factor w/ 4 levels "B","C","N","S": 2 1 2 2 3 2 2 1 3 3 ...
 $ VAR_0044: Factor w/ 0 levels: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0073: Factor w/ 1540 levels "01APR10:00:00:00",..: NA 199 NA NA NA NA NA NA 1288 NA ...
 $ VAR_0075: Factor w/ 2525 levels "01APR05:00:00:00",..: 661 825 1023 1915 1241 466 2141 1455 2109 2280 ...
 $ VAR_0156: Factor w/ 827 levels "01APR10:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0157: Factor w/ 516 levels "01APR11:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0158: Factor w/ 495 levels "01APR12:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0159: Factor w/ 724 levels "01APR12:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0166: Factor w/ 2374 levels "01APR05:00:00:00",..: NA NA NA NA NA NA NA NA 924 NA ...
 $ VAR_0167: Factor w/ 1066 levels "01APR08:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0168: Factor w/ 1903 levels "01APR05:00:00:00",..: NA NA NA NA NA NA NA NA 1357 NA ...
 $ VAR_0169: Factor w/ 2189 levels "01APR05:00:00:00",..: NA NA NA NA NA NA NA NA 846 NA ...
 $ VAR_0176: Factor w/ 2386 levels "01APR05:00:00:00",..: NA NA NA NA NA NA NA NA 929 NA ...
 $ VAR_0177: Factor w/ 1154 levels "01APR08:00:00:00",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0178: Factor w/ 1907 levels "01APR05:00:00:00",..: NA NA NA NA NA NA NA NA 1356 NA ...
 $ VAR_0179: Factor w/ 2165 levels "01APR08:00:00:00",..: NA NA NA NA NA NA NA NA 832 NA ...
 $ VAR_0200: Factor w/ 16583 levels "1 MEMPHIS","2 WHITE OAK",..: 5276 13231 12357 8287 5110 14094 5994 15610 13068 10548 ...
 $ VAR_0204: Factor w/ 1193 levels "01FEB14:00:00:00",..: 206 12 361 8 134 808 121 444 675 972 ...
 $ VAR_0214: Factor w/ 25 levels "FSI-0005-1","FSI-0003-1",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0217: Factor w/ 397 levels "01APR12:02:00:00",..: 101 25 159 11 193 72 141 226 287 357 ...
 $ VAR_0226: Factor w/ 2 levels "false","true": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0230: Factor w/ 2 levels "false","true": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0232: Factor w/ 2 levels "false","true": 2 1 2 1 2 2 1 2 1 2 ...
 $ VAR_0236: Factor w/ 2 levels "false","true": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0237: Factor w/ 46 levels "AK","AL","AR",..: 10 5 45 40 15 40 35 11 40 36 ...
 $ VAR_0274: Factor w/ 56 levels "AK","AL","AR",..: 11 25 55 49 17 24 5 46 49 41 ...
 $ VAR_0283: Factor w/ 7 levels "F","G","H","P",..: 6 6 6 6 6 6 6 6 6 6 ...
 $ VAR_0305: Factor w/ 7 levels "F","H","M","P",..: 6 6 4 4 4 6 6 6 2 6 ...
 $ VAR_0325: Factor w/ 8 levels "F","G","H","M",..: NA 3 6 3 7 3 7 7 7 7 ...
 $ VAR_0342: Factor w/ 49 levels "AA","AB","AC",..: 20 31 49 NA NA 40 24 41 NA 33 ...
 $ VAR_0352: Factor w/ 3 levels "O","R","U": 1 1 2 2 2 3 1 3 2 3 ...
 $ VAR_0353: Factor w/ 3 levels "O","R","U": 3 2 2 2 3 2 1 1 3 3 ...
 $ VAR_0354: Factor w/ 3 levels "O","R","U": 1 2 NA NA 1 2 1 2 3 3 ...
 $ VAR_0404: Factor w/ 3142 levels "2ND VICE PRESIDENT",..: 467 NA NA NA NA NA NA NA NA NA ...
 $ VAR_0467: Factor w/ 3 levels "Discharged","Discharge NA",..: NA 1 NA NA NA NA NA NA NA NA ...
 $ VAR_0493: Factor w/ 795 levels "ACCOUNTANT","ACTIVE ASSOCIATES WITH NO PRIVACY",..: 152 NA NA NA NA NA NA NA NA NA ...
 $ VAR_1934: Factor w/ 5 levels "BRANCH","CSC",..: 3 3 3 5 1 3 3 3 4 1 ...
> 
> # now they look great. we'll get the one with 0 levels
> # and the NAs later
> 
> ### PARSING DATE VARIABLES ############################
> 
> train_fact <- as.data.frame(train_fact)
> 
> #getting date variables from train_fact
> train_date = Filter(function(u) any(grepl('JAN1|FEB1|APR1',u)), train_fact)
> 
> #intermediate conversion step
> train_date = sapply(train_date, function(x) strptime(x, "%d%B%y:%H:%M:%S"))
> 
> train_date = do.call(cbind.data.frame, train_date) #converts train_date to df
> 
> #initializing matrices
> train_date_month <- data.frame(matrix(0,nrow=dim(train_date)[1],ncol=dim(train_date)[2]))
> train_date_year <- data.frame(matrix(0,nrow=dim(train_date)[1],ncol=dim(train_date)[2]))
> 
> #getting months and year variables
> for(i in 1:(dim(train_date)[2]))
+ {
+   train_date_month[,i] = as.factor(month(as.POSIXlt(train_date[,i], format="%d%B%y:%H:%M:%S")))
+   train_date_year[,i] = as.factor(year(as.POSIXlt(train_date[,i], format="%d%B%y:%H:%M:%S")))
+ }
> 
> ######### taking old date variables out of all_data ####################
> all_data = all_data[, !colnames(all_data) %in% colnames(train_date)]
> dim(all_data)
[1] 290463   1905
> 
> #renaming new date variables
> names(train_date_month) <- paste(names(train_date),"m", sep = "_")
> names(train_date_year) <- paste(names(train_date),"y", sep = "_")
> rm(train_date)
> 
> ### PARSING STATE VARIABLES ############################
> 
> #getting states variables
> state_vars <- Filter(function(u) any(grepl('TX|WV|AZ',u)), train_fact)
> rm(train_fact)
> dim(state_vars)
[1] 290463      3
> 
> #taking state variables out of all_data (this gets rid of the two state varaibles and the "city" variable with tons of levels)
> all_data = all_data[, !colnames(all_data) %in% colnames(state_vars)]
> dim(all_data)
[1] 290463   1902
> 
> state_vars <- state_vars[,2:3]
> 
> #states broken up into regions according to census: http://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf
> 
> state_vars$VAR_0237_new <- state_vars$VAR_0237
> levels(state_vars$VAR_0237_new) <- c(levels(state_vars$VAR_0237_new), "NE","MA","ENC","WNC","SA","ESC","WSC","MT","PC","Other","Missing")
> state_vars[state_vars$VAR_0237 %in% c("CT", "ME","MA","NH","RI","VT"), "VAR_0237_new"] <- "NE"
> state_vars[state_vars$VAR_0237 %in% c("NJ", "NY","PA"), "VAR_0237_new"] <- "MA"
> state_vars[state_vars$VAR_0237 %in% c("IN", "IL","MI","OH","WI"), "VAR_0237_new"] <- "ENC"
> state_vars[state_vars$VAR_0237 %in% c("IA", "KS","MN","MO","NE","ND","SD"), "VAR_0237_new"] <- "WNC"
> state_vars[state_vars$VAR_0237 %in% c("DE", "DC","FL","GA","MD","NC","SC","VA","WV"), "VAR_0237_new"] <- "SA"
> state_vars[state_vars$VAR_0237 %in% c("AL", "KY","MS","TN"), "VAR_0237_new"] <- "ESC"
> state_vars[state_vars$VAR_0237 %in% c("AR", "LA","OK","TX"), "VAR_0237_new"] <- "WSC"
> state_vars[state_vars$VAR_0237 %in% c("AZ", "CO","ID","NM","MT","UT","NV","WY"), "VAR_0237_new"] <- "MT"
> state_vars[state_vars$VAR_0237 %in% c("AK", "CA","HI","OR","WA"), "VAR_0237_new"] <- "PC"
> state_vars[state_vars$VAR_0237 %in% c("PR","EE","RR","RN","GS"), "VAR_0237_new"] <- "Other"
> state_vars[state_vars$VAR_0237 %in% c("-1",""), "VAR_0237_new"] <- "Missing";
> 
> state_vars$VAR_0274_new <- state_vars$VAR_0274
> levels(state_vars$VAR_0274_new) <- c(levels(state_vars$VAR_0274_new), "NE","MA","ENC","WNC","SA","ESC","WSC","MT","PC","Other","Missing")
> state_vars[state_vars$VAR_0274 %in% c("CT", "ME","MA","NH","RI","VT"), "VAR_0274_new"] <- "NE"
> state_vars[state_vars$VAR_0274 %in% c("NJ", "NY","PA"), "VAR_0274_new"] <- "MA"
> state_vars[state_vars$VAR_0274 %in% c("IN", "IL","MI","OH","WI"), "VAR_0274_new"] <- "ENC"
> state_vars[state_vars$VAR_0274 %in% c("IA", "KS","MN","MO","NE","ND","SD"), "VAR_0274_new"] <- "WNC"
> state_vars[state_vars$VAR_0274 %in% c("DE", "DC","FL","GA","MD","NC","SC","VA","WV"), "VAR_0274_new"] <- "SA"
> state_vars[state_vars$VAR_0274 %in% c("AL", "KY","MS","TN"), "VAR_0274_new"] <- "ESC"
> state_vars[state_vars$VAR_0274 %in% c("AR", "LA","OK","TX"), "VAR_0274_new"] <- "WSC"
> state_vars[state_vars$VAR_0274 %in% c("AZ", "CO","ID","NM","MT","UT","NV","WY"), "VAR_0274_new"] <- "MT"
> state_vars[state_vars$VAR_0274 %in% c("AK", "CA","HI","OR","WA"), "VAR_0274_new"] <- "PC"
> state_vars[state_vars$VAR_0274 %in% c("PR","EE","RR","RN","GS"), "VAR_0274_new"] <- "Other"
> state_vars[state_vars$VAR_0274 %in% c("-1",""), "VAR_0274_new"] <- "Missing";
> 
> state_vars$VAR_0237_new <- drop.levels(state_vars$VAR_0237_new)
> state_vars$VAR_0274_new <- drop.levels(state_vars$VAR_0274_new)
> state_vars <- state_vars[,3:4]
> 
> 
> 
> #add in new factor variables (train_date_month, train_date_year, state_vars) to all_data
> all_data <- data.frame(all_data, train_date_month, train_date_year, state_vars)
> rm(train_date_month)
> rm(train_date_year)
> # check to make sure it all looks good
> str(all_data[,which(sapply(all_data, class) == "factor")])
'data.frame':	290463 obs. of  53 variables:
 $ VAR_0001    : Factor w/ 3 levels "H","Q","R": 1 1 1 1 3 3 1 3 3 3 ...
 $ VAR_0005    : Factor w/ 4 levels "B","C","N","S": 2 1 2 2 3 2 2 1 3 3 ...
 $ VAR_0044    : Factor w/ 0 levels: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0214    : Factor w/ 25 levels "FSI-0005-1","FSI-0003-1",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0226    : Factor w/ 2 levels "false","true": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0230    : Factor w/ 2 levels "false","true": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0232    : Factor w/ 2 levels "false","true": 2 1 2 1 2 2 1 2 1 2 ...
 $ VAR_0236    : Factor w/ 2 levels "false","true": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0283    : Factor w/ 7 levels "F","G","H","P",..: 6 6 6 6 6 6 6 6 6 6 ...
 $ VAR_0305    : Factor w/ 7 levels "F","H","M","P",..: 6 6 4 4 4 6 6 6 2 6 ...
 $ VAR_0325    : Factor w/ 8 levels "F","G","H","M",..: NA 3 6 3 7 3 7 7 7 7 ...
 $ VAR_0342    : Factor w/ 49 levels "AA","AB","AC",..: 20 31 49 NA NA 40 24 41 NA 33 ...
 $ VAR_0352    : Factor w/ 3 levels "O","R","U": 1 1 2 2 2 3 1 3 2 3 ...
 $ VAR_0353    : Factor w/ 3 levels "O","R","U": 3 2 2 2 3 2 1 1 3 3 ...
 $ VAR_0354    : Factor w/ 3 levels "O","R","U": 1 2 NA NA 1 2 1 2 3 3 ...
 $ VAR_0404    : Factor w/ 3142 levels "2ND VICE PRESIDENT",..: 467 NA NA NA NA NA NA NA NA NA ...
 $ VAR_0467    : Factor w/ 3 levels "Discharged","Discharge NA",..: NA 1 NA NA NA NA NA NA NA NA ...
 $ VAR_0493    : Factor w/ 795 levels "ACCOUNTANT","ACTIVE ASSOCIATES WITH NO PRIVACY",..: 152 NA NA NA NA NA NA NA NA NA ...
 $ VAR_1934    : Factor w/ 5 levels "BRANCH","CSC",..: 3 3 3 5 1 3 3 3 4 1 ...
 $ VAR_0073_m  : Factor w/ 12 levels "1","2","3","4",..: NA 9 NA NA NA NA NA NA 1 NA ...
 $ VAR_0075_m  : Factor w/ 12 levels "1","2","3","4",..: 11 11 12 9 10 6 11 1 1 7 ...
 $ VAR_0156_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0157_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0158_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0159_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0166_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0167_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0168_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0169_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0176_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0177_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0178_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0179_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0204_m  : Factor w/ 2 levels "1","2": 1 2 1 2 1 1 1 1 1 1 ...
 $ VAR_0217_m  : Factor w/ 12 levels "1","2","3","4",..: 11 10 12 11 10 6 10 1 4 7 ...
 $ VAR_0073_y  : Factor w/ 5 levels "2008","2009",..: NA 5 NA NA NA NA NA NA 5 NA ...
 $ VAR_0075_y  : Factor w/ 11 levels "2001","2002",..: 10 10 10 9 10 11 9 11 11 11 ...
 $ VAR_0156_y  : Factor w/ 6 levels "2007","2008",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0157_y  : Factor w/ 5 levels "2008","2009",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0158_y  : Factor w/ 5 levels "2008","2009",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0159_y  : Factor w/ 6 levels "2007","2008",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0166_y  : Factor w/ 11 levels "2001","2002",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0167_y  : Factor w/ 8 levels "2005","2006",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0168_y  : Factor w/ 11 levels "1999","2000",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0169_y  : Factor w/ 11 levels "2002","2003",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0176_y  : Factor w/ 11 levels "2001","2002",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0177_y  : Factor w/ 8 levels "2005","2006",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0178_y  : Factor w/ 11 levels "1999","2000",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0179_y  : Factor w/ 11 levels "2002","2003",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0204_y  : Factor w/ 1 level "2014": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0217_y  : Factor w/ 2 levels "2011","2012": 1 2 1 2 1 2 1 2 2 2 ...
 $ VAR_0237_new: Factor w/ 9 levels "ENC","ESC","MA",..: 7 6 7 9 1 9 6 7 9 3 ...
 $ VAR_0274_new: Factor w/ 10 levels "ENC","ESC","MA",..: 8 1 8 10 1 5 7 8 10 3 ...
> 
> # we know we can remove the factors with 0 and 1 levels
> # which are VAR_0044 and VAR_0204_y
> 
> myvars <- names(all_data) %in% c('VAR_0044', 'VAR_0204_y')
> all_data <- all_data[!myvars]
> 
> # we also need to drop those with > 32 levels
> bad.vars <- which(sapply(all_data,nlevels) >32)
> all_data <- all_data[-bad.vars]
> 
> ######## Exploring values to change to NA #############################
> 
> train_numr = all_data[, sapply(all_data, is.numeric)]
> 
> train_numr_samp = train_numr[,sample(1:ncol(train_numr),100)]
> str(lapply(train_numr_samp, unique))
List of 100
 $ VAR_0508: int [1:5] 0 1 NA 2 3
 $ VAR_1323: int [1:2167] 668 103 999999997 30 353 46 25 999999996 17 20 ...
 $ VAR_0876: int [1:214] -99999 9 20 24 44 13 42 66 10 40 ...
 $ VAR_0309: int [1:761] 101 6 -1 246 60 140 32 93 14 279 ...
 $ VAR_0296: int [1:70771] 69928 351000 0 105749 336392 57809 121009 261932 129150 86715 ...
 $ VAR_0580: int [1:27] 0 2 97 1 4 5 99 98 3 6 ...
 $ VAR_1552: int [1:5] 1 0 2 3 4
 $ VAR_1871: int [1:580] 999999998 97 127 999999997 999999999 92 93 65 91 203 ...
 $ VAR_0337: num [1:743] 0 1.34 0.23 0.83 1.88 0.81 -1 1.51 1.54 1.12 ...
 $ VAR_1471: int [1:31] 97 0 1 2 99 98 16 3 8 4 ...
 $ VAR_0086: int [1:394] 1 2 8 19 22 5 14 65 3 131 ...
 $ VAR_0221: int [1:2] 0 NA
 $ VAR_1319: int [1:4448] 60000 750 999999996 300 400 1000 500 2500 600 1750 ...
 $ VAR_0765: int [1:7] 0 -99999 1 2 3 4 5
 $ VAR_1546: int [1:19] 0 1 2 3 4 6 5 8 9 7 ...
 $ VAR_1172: int [1:118] 9999 45 9998 2 1 106 86 51 12 32 ...
 $ VAR_1217: int [1:39] 1 3 4 2 0 99 5 7 8 10 ...
 $ VAR_1111: int [1:143] 994 0 999 100 997 20 11 10 2 19 ...
 $ VAR_1640: int [1:78] 100 0 998 63 80 999 50 67 88 75 ...
 $ VAR_0280: int [1:209] 1 -1 13 7 76 21 NA 91 20 27 ...
 $ VAR_0679: int [1:10] 998 400 999 1 997 30 60 120 90 0
 $ VAR_1772: int [1:19] 0 97 1 99 98 2 3 8 4 6 ...
 $ VAR_1174: int [1:7225] 0 1621 49932 887178 38088 506 18725 1467 994 1496 ...
 $ VAR_1512: int [1:263] 997 97 55 77 48 74 25 85 83 996 ...
 $ VAR_0892: int [1:10622] 24732 679 -99999 92 1291 610 116 219 412 751 ...
 $ VAR_1038: int [1:46] 0 1 3 4 2 6 7 5 11 19 ...
 $ VAR_1658: int [1:20] 0 98 99 1 2 3 4 6 5 9 ...
 $ VAR_0633: int [1:85] 9998 37 12 14 5 11 9 51 15 64 ...
 $ VAR_1641: int [1:67] 997 50 100 998 0 999 20 22 25 67 ...
 $ VAR_0885: int [1:97] 100 92 75 80 89 33 67 0 86 50 ...
 $ VAR_1657: int [1:17] 0 98 99 1 2 4 3 7 6 5 ...
 $ VAR_1114: int [1:358] 62 65 995 95 76 48 70 88 92 99 ...
 $ VAR_1674: int [1:8] 0 98 99 1 2 3 5 4
 $ VAR_1559: int [1:10] 0 1 2 3 4 5 7 6 10 8
 $ VAR_0882: int [1:280] -99999 96 23 100 86 71 99 81 44 54 ...
 $ VAR_1607: int [1:13] 97 0 98 2 1 99 3 6 4 5 ...
 $ VAR_1004: int [1:32] 0 9 1 6 3 4 2 5 99 8 ...
 $ VAR_0836: int [1:122] 16 20 14 49 13 7 17 8 26 9 ...
 $ VAR_1062: int [1:17] 0 2 99 1 3 5 4 97 6 8 ...
 $ VAR_1199: int [1:43300] 999999997 26051 12277 20593 10071 18877 5818 999999996 20359 999999998 ...
 $ VAR_0139: int [1:4] 0 1 NA 2
 $ VAR_0819: int [1:19] 0 1 2 3 6 7 4 5 8 10 ...
 $ VAR_0418: int [1:49] 0 1 3 7 2 17 5 NA 8 4 ...
 $ VAR_0060: int [1:72] 1 2 7 5 8 4 14 22 26 11 ...
 $ VAR_1318: int [1:3345] 20000 300 999999996 600 500 700 1000 200 3000 2230 ...
 $ VAR_1797: int [1:36] 0 1 4 999 3 998 997 2 6 8 ...
 $ VAR_1480: int [1:33] 97 0 1 99 98 16 4 2 3 8 ...
 $ VAR_1120: int [1:101] 20 57 19 15 59 50 4 8 41 100 ...
 $ VAR_0721: int [1:71] 1 6 4 3 5 17 2 0 22 7 ...
 $ VAR_1563: int [1:5] 1 0 2 3 4
 $ VAR_0225: int [1:567] 1 2 30 6 298 3 4 82 5 117 ...
 $ VAR_1422: int [1:9] 998 30 120 90 1 999 400 60 0
 $ VAR_0320: num [1:763] 0.74 1.3 0 0.91 1.72 0.99 0.84 1 0.17 3.41 ...
 $ VAR_0889: int [1:4089] -99999 1154 369 1011 258 615 296 390 218 272 ...
 $ VAR_0851: int [1:27] -99999 13 10 20 0 12 1 14 6 16 ...
 $ VAR_1179: int [1:115267] 76857 341365 107267 45794 20475 21139 327744 4326 24969 1197 ...
 $ VAR_0327: int [1:4] 0 1 -1 NA
 $ VAR_1599: int [1:14] 97 0 98 2 1 99 3 8 4 5 ...
 $ VAR_1767: int [1:53] 2 8 97 0 9 1 5 3 17 4 ...
 $ VAR_1678: int [1:8] 97 0 98 99 1 2 5 3
 $ VAR_0115: int [1:4] 0 1 NA 2
 $ VAR_1011: int [1:92] 20 21 13 47 15 6 18 4 17 1 ...
 $ VAR_0881: int [1:286] 62 58 -99999 61 90 106 49 44 137 101 ...
 $ VAR_1177: int [1:22] 0 3 1 2 99 98 5 4 8 7 ...
 $ VAR_0397: int [1:5] 0 NA 1 2 3
 $ VAR_0541: int [1:97735] 49463 303472 94990 20593 10071 18877 321783 2961 20359 815 ...
 $ VAR_1894: int [1:16145] 999999997 2788 999999996 2837 999999998 150 308 0 111 1691 ...
 $ VAR_0602: int [1:328] 997 998 999 996 43 73 5 6 4 42 ...
 $ VAR_1654: int [1:480] 175 125 47 9998 149 234 34 27 128 9999 ...
 $ VAR_1454: int [1:326] 9998 6 26 104 30 42 37 91 40 12 ...
 $ VAR_1544: int [1:9] 0 1 2 3 4 5 6 7 9
 $ VAR_0702: int [1:8293] -99999 24408 71016 8610 18094 9648 21014 17648 36393 156712 ...
 $ VAR_0565: int [1:21] 0 1 2 4 3 5 9 6 7 15 ...
 $ VAR_0904: int [1:2799] -99999 10200 7000 5000 2500 1200 500 3500 3000 5001 ...
 $ VAR_0559: int [1:83] 96 16 4 38 11 47 5 19 28 15 ...
 $ VAR_1902: int [1:521] 173 12 46 106 230 9998 139 14 80 28 ...
 $ VAR_0030: int [1:2] 0 NA
 $ VAR_1643: int [1:72] 20 50 100 998 0 997 999 22 67 25 ...
 $ VAR_0181: int [1:3] 0 1 NA
 $ VAR_0426: int [1:32] 0 1 2 NA 3 4 8 6 5 7 ...
 $ VAR_1060: int [1:19] 0 2 3 1 99 5 6 8 4 7 ...
 $ VAR_0039: int [1:2] 0 NA
 $ VAR_1252: int [1:2903] 0 999999997 999999999 999999998 789 1095 3083 1624 660 999999996 ...
 $ VAR_1711: int [1:85] 9996 9998 2 9999 4 1 28 27 14 54 ...
 $ VAR_1212: int [1:20] 0 1 99 4 3 2 5 7 6 10 ...
 $ VAR_1659: int [1:19] 0 98 4 99 2 1 3 6 5 7 ...
 $ VAR_0681: int [1:388] 99 9998 59 60 9999 105 81 107 95 10 ...
 $ VAR_0921: int [1:47821] 0 8267 1030 902816 5073 941 648 674 4102 36 ...
 $ VAR_0390: int [1:12] 0 NA 2 1 3 8 4 5 6 14 ...
 $ VAR_1197: int [1:10] 97 0 98 99 1 2 3 4 5 6
 $ VAR_1768: int [1:57] 2 9 1 0 10 5 3 19 6 8 ...
 $ VAR_1703: int [1:9] 1 994 998 400 999 120 30 60 90
 $ VAR_0571: int [1:10131] 0 9899 9202 1840 3874 1094 1114 4211 7423 961 ...
 $ VAR_1687: int [1:390] 999999997 0 999999998 999999999 54472 95706 460942 999999996 24477 72830 ...
 $ VAR_1925: int [1:13] 0 1 99 2 3 4 5 6 19 10 ...
 $ VAR_0316: int [1:67572] 69928 351000 0 105749 336392 121009 261932 86715 48000 23300 ...
 $ VAR_0334: int [1:53812] 0 235000 13750 57809 551836 129150 27097 55000 -1 47202 ...
 $ VAR_0449: int [1:43] 0 NA 22126 2485 8933 11528 4303 1515 2352 4052 ...
 $ VAR_1131: int [1:2200] 999994 321 804 999999 632 358 54 534 866 1043 ...
  [list output truncated]
> 
> rm(train_numr)
> rm(train_numr_samp)
> 
> # hist(all_data$VAR_1215)
> # hist(all_data$VAR_0979)
> # hist(all_data$VAR_1251)
> # hist(all_data$VAR_1113)
> # hist(all_data$VAR_1682)
> # 
> # 
> # table(all_data$VAR_1215)
> # table(all_data$VAR_0979)
> # table(all_data$VAR_1251)
> 
> 
> #it looks like 999999996 - 999999999 are some sort of other indicator. 
> #These values only occur in int class variables (there's only 13 numeric variables)
> #I'm also not finding -1 when -99999 is present, so these could theoretically mean missing or some other indicator from different data locations/servers.
> #However NA's are present in variables with -1 as a level
> # basically it is one awful mess
> ############## IMPUTATION ##########################################################
> 
> 
> #I tried converting our factors to characters so that when I save to csv we don't have factors convert to numeric
> ##all_data[sapply(all_data, is.factor)] <- lapply(all_data[sapply(all_data, is.factor)], as.character)
> #This ended up not working 
> 
> dtypes <- sapply(all_data, class)
> unique(dtypes)
[1] "factor"  "integer" "logical" "numeric"
> 
> 
> 
> ### WRITE CHECKPOINT ############################
> 
> # a little silly, but here we are writing the 
> # data file out to a csv so we can read it back
> # in with the NAs coded properly
> 
> write.csv(all_data, file="Checkpoint2.csv") #you can use the link below for this file below if you like
> # here is the location of Checkpoint2.csv: https://uofi.box.com/s/qtpvgdkql1wyylvfkygz830dk2d0dr32
> 
> # We need a factor indicator to re-convert the factor variables that get 
> # miscoded using read_csv
> factor_ind <- which(sapply(all_data,class)=="factor")
> rm(list=setdiff(ls(), "factor_ind"))
> 
> 
> ### END WRITE CHECKPOINT ########################
> 
> 
> ### Read back in the data 
> 
> all_data <- read.csv("Checkpoint2.csv",
+                      na=c("","NA"," ","NULL",-1,-99999,999999999,999999998,999999997,999999996),
+                      row.names=1)
> 
> # Store the names of the factors
> factor_names <- names(factor_ind)
> 
> # convert back to factors
> all_data[,factor_names] <- lapply(all_data[,factor_names] , factor)
> 
> # get rid of the logical variables, they are useless
> bad.vars <- which(sapply(all_data,class) =='logical')
> all_data <- all_data[,-bad.vars]
> gc()
            used   (Mb) gc trigger   (Mb)   max used    (Mb)
Ncells    405732   21.7    1702320   91.0    1640762    87.7
Vcells 282443242 2154.9 1193497332 9105.7 1491837241 11381.9
> 
> # We can check and see that we do have factors once again
> dtypes <- sapply(all_data, class)
> unique(dtypes)
[1] "factor"  "integer" "numeric"
> 
> str(all_data[,which(sapply(all_data, class) == "factor")])
'data.frame':	290463 obs. of  48 variables:
 $ VAR_0001    : Factor w/ 3 levels "H","Q","R": 1 1 1 1 3 3 1 3 3 3 ...
 $ VAR_0005    : Factor w/ 4 levels "B","C","N","S": 2 1 2 2 3 2 2 1 3 3 ...
 $ VAR_0214    : Factor w/ 25 levels "FSI-0003-1","FSI-0005-1",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0226    : Factor w/ 2 levels "false","true": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0230    : Factor w/ 2 levels "false","true": 1 1 1 1 1 1 1 1 1 1 ...
 $ VAR_0232    : Factor w/ 2 levels "false","true": 2 1 2 1 2 2 1 2 1 2 ...
 $ VAR_0236    : Factor w/ 2 levels "false","true": 2 2 2 2 2 2 2 2 2 2 ...
 $ VAR_0283    : Factor w/ 7 levels "F","G","H","P",..: 6 6 6 6 6 6 6 6 6 6 ...
 $ VAR_0305    : Factor w/ 7 levels "F","H","M","P",..: 6 6 4 4 4 6 6 6 2 6 ...
 $ VAR_0325    : Factor w/ 8 levels "F","G","H","M",..: NA 3 6 3 7 3 7 7 7 7 ...
 $ VAR_0352    : Factor w/ 3 levels "O","R","U": 1 1 2 2 2 3 1 3 2 3 ...
 $ VAR_0353    : Factor w/ 3 levels "O","R","U": 3 2 2 2 3 2 1 1 3 3 ...
 $ VAR_0354    : Factor w/ 3 levels "O","R","U": 1 2 NA NA 1 2 1 2 3 3 ...
 $ VAR_0467    : Factor w/ 3 levels "Discharged","Discharge NA",..: NA 1 NA NA NA NA NA NA NA NA ...
 $ VAR_1934    : Factor w/ 5 levels "BRANCH","CSC",..: 3 3 3 5 1 3 3 3 4 1 ...
 $ VAR_0073_m  : Factor w/ 12 levels "1","2","3","4",..: NA 9 NA NA NA NA NA NA 1 NA ...
 $ VAR_0075_m  : Factor w/ 12 levels "1","2","3","4",..: 11 11 12 9 10 6 11 1 1 7 ...
 $ VAR_0156_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0157_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0158_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0159_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0166_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0167_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0168_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0169_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0176_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0177_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0178_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0179_m  : Factor w/ 12 levels "1","2","3","4",..: NA NA NA NA NA NA NA NA 3 NA ...
 $ VAR_0204_m  : Factor w/ 2 levels "1","2": 1 2 1 2 1 1 1 1 1 1 ...
 $ VAR_0217_m  : Factor w/ 12 levels "1","2","3","4",..: 11 10 12 11 10 6 10 1 4 7 ...
 $ VAR_0073_y  : Factor w/ 5 levels "2008","2009",..: NA 5 NA NA NA NA NA NA 5 NA ...
 $ VAR_0075_y  : Factor w/ 11 levels "2001","2002",..: 10 10 10 9 10 11 9 11 11 11 ...
 $ VAR_0156_y  : Factor w/ 6 levels "2007","2008",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0157_y  : Factor w/ 5 levels "2008","2009",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0158_y  : Factor w/ 5 levels "2008","2009",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0159_y  : Factor w/ 6 levels "2007","2008",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0166_y  : Factor w/ 11 levels "2001","2002",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0167_y  : Factor w/ 8 levels "2005","2006",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0168_y  : Factor w/ 11 levels "1999","2000",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0169_y  : Factor w/ 11 levels "2002","2003",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0176_y  : Factor w/ 11 levels "2001","2002",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0177_y  : Factor w/ 8 levels "2005","2006",..: NA NA NA NA NA NA NA NA NA NA ...
 $ VAR_0178_y  : Factor w/ 11 levels "1999","2000",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0179_y  : Factor w/ 11 levels "2002","2003",..: NA NA NA NA NA NA NA NA 11 NA ...
 $ VAR_0217_y  : Factor w/ 2 levels "2011","2012": 1 2 1 2 1 2 1 2 2 2 ...
 $ VAR_0237_new: Factor w/ 9 levels "ENC","ESC","MA",..: 7 6 7 9 1 9 6 7 9 3 ...
 $ VAR_0274_new: Factor w/ 10 levels "ENC","ESC","MA",..: 8 1 8 10 1 5 7 8 10 3 ...
> 
> 
> ### NA FIX (FINALLY) ############################
> 
> all_data = na.roughfix(all_data)
> 
> # checking for NAs
> na_count <- sapply(all_data, function(y) sum(which(is.na(y)))) # na's by column
> sum(na_count) # total na's
[1] 0
> 
> #removing constant variables
> col_ct = sapply(all_data, function(x) length(unique(x)))
> bad.vars <- which(col_ct ==1)
> all_data <- all_data[,-bad.vars]
> gc()
            used   (Mb) gc trigger   (Mb)   max used    (Mb)
Ncells    407171   21.8    1361856   72.8    1640762    87.7
Vcells 343016466 2617.1  954797865 7284.6 1491837241 11381.9
> 
> # Store cleaned data so I don't have to do this garbage again
> cleaned_data <- all_data
> rm(all_data)
> save(cleaned_data,file="cleaned_data.rdata")
> rm(list=ls())
> gc()
         used (Mb) gc trigger   (Mb)   max used    (Mb)
Ncells 403075 21.6    1361856   72.8    1640762    87.7
Vcells 977437  7.5  763838292 5827.7 1491837241 11381.9
> 
> proc.time()
    user   system  elapsed 
1097.200   42.128 1446.945 
